package com.publicity.ui;

import com.publicity.domain.Cliente;
import com.publicity.service.DBService;
import com.publicity.utils.ButtonIcon;
import java.awt.Dimension;
import java.awt.Insets;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yordanys
 * @version 1.0
 * Esta clase gestiona la interfaz relacionada con el cliente.
 */
public class ClienteDialog extends javax.swing.JDialog {

    /**
     * Creates new form ClienteDialog
     */
    public ClienteDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        namesField = new javax.swing.JTextField();
        lastNamesField = new javax.swing.JTextField();
        cedulaField = new javax.swing.JTextField();
        bussinesField = new javax.swing.JTextField();
        rifField = new javax.swing.JTextField();
        telephoneField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        payField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ADMINISTRADOR DE CLIENTES");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del cliente"));

        jLabel1.setLabelFor(namesField);
        jLabel1.setText("Nombres:");

        jLabel2.setText("Apellidos:");

        jLabel3.setText("Cédula:");

        jLabel4.setText("RIF:");

        jLabel5.setText("Teléfono:");

        jLabel6.setText("Empresa:");

        cedulaField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cedulaFieldKeyTyped(evt);
            }
        });

        rifField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rifFieldKeyTyped(evt);
            }
        });

        telephoneField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                telephoneFieldKeyTyped(evt);
            }
        });

        jLabel9.setText("Pago");

        payField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payFieldKeyTyped(evt);
            }
        });

        addButton.setMinimumSize(new java.awt.Dimension(33, 23));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        delButton.setMinimumSize(new java.awt.Dimension(33, 23));
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        cancelButton.setMinimumSize(new java.awt.Dimension(33, 23));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(122, 122, 122)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(namesField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bussinesField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(lastNamesField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rifField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel6))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(telephoneField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addComponent(cedulaField, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(payField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNamesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cedulaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bussinesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rifField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telephoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(payField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(delButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );

        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombres", "Apellidos", "Cédula", "RIF", "Teléfono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(clientsTable);
        clientsTable.getColumnModel().getColumn(0).setMinWidth(0);
        clientsTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        clientsTable.getColumnModel().getColumn(0).setMaxWidth(0);
        clientsTable.getColumnModel().getColumn(3).setMinWidth(80);
        clientsTable.getColumnModel().getColumn(3).setMaxWidth(90);
        clientsTable.getColumnModel().getColumn(4).setMinWidth(90);
        clientsTable.getColumnModel().getColumn(4).setMaxWidth(100);
        clientsTable.getColumnModel().getColumn(5).setMinWidth(95);
        clientsTable.getColumnModel().getColumn(5).setMaxWidth(105);

        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        adicionarCliente();
    }//GEN-LAST:event_addButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Esta operación eliminará las publicidades asociadas al cliente.\n¿Está seguro que desea continuar?\n\n", "Mensaje de confirmación", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
            eliminarCliente();
    }//GEN-LAST:event_delButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        restablecerFormulario();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void clientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientsTableMouseClicked
        if (evt.getClickCount() == 2)
            cargarCliente();
    }//GEN-LAST:event_clientsTableMouseClicked

    private void cedulaFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cedulaFieldKeyTyped
        String selectedText = cedulaField.getSelectedText();
        if (selectedText != null) {         
            int position = cedulaField.getSelectionStart() + 1;
            cedulaField.setText(cedulaField.getText().replace(selectedText, Character.toString(evt.getKeyChar())));
            cedulaField.setCaretPosition(position);            
            evt.consume();
        } else {
            if (!Character.isDigit(evt.getKeyChar()) || cedulaField.getText().length() == 8)
                evt.consume();
        }
    }//GEN-LAST:event_cedulaFieldKeyTyped

    private void rifFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rifFieldKeyTyped
        String selectedText = rifField.getSelectedText();
        if (selectedText != null) {         
            int position = rifField.getSelectionStart() + 1;
            rifField.setText(rifField.getText().replace(selectedText, Character.toString(evt.getKeyChar())));
            rifField.setCaretPosition(position);            
            evt.consume();
        } else {
            if (!Character.isDigit(evt.getKeyChar()) || rifField.getText().length() == 9)
                evt.consume();
        }
    }//GEN-LAST:event_rifFieldKeyTyped

    private void telephoneFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telephoneFieldKeyTyped
        String selectedText = telephoneField.getSelectedText();
        if (selectedText != null) {         
            int position = telephoneField.getSelectionStart() + 1;
            telephoneField.setText(telephoneField.getText().replace(selectedText, Character.toString(evt.getKeyChar())));
            telephoneField.setCaretPosition(position);            
            evt.consume();
        } else {
            if (!Character.isDigit(evt.getKeyChar()) || telephoneField.getText().length() == 11)
                evt.consume();
        }
    }//GEN-LAST:event_telephoneFieldKeyTyped

    private void payFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payFieldKeyTyped
        if (!Character.isDigit(evt.getKeyChar()))
            if (evt.getKeyChar() == '.' && payField.getText().contains("."))
                evt.consume();
    }//GEN-LAST:event_payFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClienteDialog dialog = new ClienteDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField bussinesField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField cedulaField;
    private javax.swing.JTable clientsTable;
    private javax.swing.JButton delButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lastNamesField;
    private javax.swing.JTextField namesField;
    private javax.swing.JTextField payField;
    private javax.swing.JTextField rifField;
    private javax.swing.JTextField telephoneField;
    // End of variables declaration//GEN-END:variables
    
    private final DBService dBService = new DBService();
    
    private Cliente cliente;
    private Integer filaSeleccionada;
    
    private void initForm() {
        setLocationRelativeTo(null); 
        
        addButton.setIcon(new ButtonIcon("add.png"));
        addButton.setMargin(new Insets(0, 0, 0, 0));
        
        delButton.setIcon(new ButtonIcon("del.png"));
        delButton.setMargin(new Insets(0, 0, 0, 0));
        
        cancelButton.setIcon(new ButtonIcon("clear.png"));
        cancelButton.setMargin(new Insets(0, 0, 0, 0));
        
        cargarClientes();   
        
        cliente = new Cliente();
    }
    
    private void restablecerFormulario() {
        namesField.setText("");
        lastNamesField.setText("");        
        cedulaField.setText("");
        bussinesField.setText("");
        rifField.setText("");
        telephoneField.setText("");        
        payField.setText("");
        filaSeleccionada = null;
        namesField.requestFocus();
    }
    
    private void actualizarFormulario(Cliente cliente) {
        namesField.setText(cliente.getNombres());
        lastNamesField.setText(cliente.getApellidos());
        cedulaField.setText(cliente.getCedula());
        bussinesField.setText(cliente.getEmpresa());
        rifField.setText(cliente.getRif());
        telephoneField.setText(cliente.getTelefono());        
        payField.setText(String.valueOf(cliente.getPago()));
        this.cliente = cliente;
        namesField.requestFocus();
    }
    
    private Cliente validateData() throws Exception {
        String nombres = namesField.getText();
        if (nombres.trim().isEmpty())
            throw new Exception("El campo \"Nombes\" es requerido.");              
        
        String apellidos = lastNamesField.getText();     
        
        String cedula = cedulaField.getText();        
        if (cedula.trim().isEmpty())
            throw new Exception("El campo \"Cédula\" es requerido.");        
        
        String empresa = bussinesField.getText();        
        
        String rif = rifField.getText();
        //throw new Exception("Al campo \"RIF\" le faltan dígitos.");                    
        
        String telefono = telephoneField.getText();  
        if (telefono.isEmpty())
            throw new Exception("El campo \"Teléfono\" es requerido.");
        if (telefono.trim().length() < 11)
            throw new Exception("Al campo \"Teléfono\" le faltan dígitos.");
        
        Double pago = null;
        try {
            pago = Double.parseDouble(payField.getText());
        } catch(NumberFormatException ex) {
            throw new Exception("El campo \"Pago\" no es correcto.");
        }
        
        return new Cliente(nombres, apellidos, cedula, empresa, rif, telefono, pago);
    }
        
    private void cargarClientes() {
        try {
            List<Cliente> clientes = dBService.obtenerClientes();
            DefaultTableModel model = (DefaultTableModel) clientsTable.getModel();
            for (Cliente clienteBuscado : clientes) {
                model.addRow(new Object[]{clienteBuscado.getClienteId(), clienteBuscado.getNombres(), clienteBuscado.getApellidos(), clienteBuscado.getCedula(), clienteBuscado.getRif(), clienteBuscado.getTelefono()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error de acceso a base de datos", JOptionPane.ERROR_MESSAGE);
        }     
    }

    private void cargarCliente() {
        int index = clientsTable.getSelectedRow();
        if (index != -1) {
            Long clienteId = (Long) clientsTable.getValueAt(index, 0);                        
            try {
                Cliente clienteBuscado = dBService.obtenerClientePorId(clienteId);
                if (clienteBuscado != null) {  
                    filaSeleccionada = index;
                    actualizarFormulario(clienteBuscado);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error de acceso a datos", JOptionPane.ERROR_MESSAGE);
            }            
        }
    }
    
    private void adicionarCliente() {
        Cliente nuevoCliente = null;
        try {
            nuevoCliente = validateData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            if (cliente.getClienteId() == null) {
                Long clienteId = dBService.adicionarCliente(nuevoCliente) + 1;                
                ((DefaultTableModel)clientsTable.getModel()).addRow(new Object[]{clienteId, nuevoCliente.getNombres(), nuevoCliente.getApellidos(), nuevoCliente.getCedula(), nuevoCliente.getRif(), nuevoCliente.getTelefono()});                       
            } else {
                nuevoCliente.setClienteId(cliente.getClienteId());
                dBService.editarCliente(nuevoCliente);
                actualizarCliente(nuevoCliente);
            }
            restablecerFormulario();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error de acceso a base de datos", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void actualizarCliente(Cliente cliente) {
        DefaultTableModel model = (DefaultTableModel) clientsTable.getModel();        
        model.setValueAt(cliente.getNombres(), filaSeleccionada, 1);
        model.setValueAt(cliente.getApellidos(), filaSeleccionada, 2);
        model.setValueAt(cliente.getCedula(), filaSeleccionada, 3);
        model.setValueAt(cliente.getRif(), filaSeleccionada, 4);
        model.setValueAt(cliente.getTelefono(), filaSeleccionada, 5);        
    }
    
    private void eliminarCliente() {
        int selectedItem = clientsTable.getSelectedRow();
        if (selectedItem != -1) {
            Long id = (Long) clientsTable.getValueAt(selectedItem, 0);
            try {
                dBService.eliminarCliente(id);
                ((DefaultTableModel)clientsTable.getModel()).removeRow(selectedItem);  
                restablecerFormulario();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error de acceso a datos", JOptionPane.ERROR_MESSAGE);
            }            
        } else 
            JOptionPane.showMessageDialog(this, "Debe seleccionar un elemento a eliminar.", "No hay elementos", JOptionPane.ERROR_MESSAGE);
    }
    
}
